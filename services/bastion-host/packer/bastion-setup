#!/bin/bash
# This script has been tested with the following operating systems:
#
# 1. Ubuntu 18.04

set -e

readonly CLOUDWATCH_CONFIG_FILE="cloudwatch-config.json"
readonly DOWNLOAD_CLOUDWATCH_PACKAGE_PATH="/tmp/amazon-cloudwatch-agent.deb"
readonly CLOUDWATCH_CONFIGURATION_PATH="/opt/aws/amazon-cloudwatch-agent/config"

readonly SCRIPT_NAME="$(basename "$0")"

function log {
  local -r level="$1"
  local -r message="$2"
  local -r timestamp=$(date +"%Y-%m-%d %H:%M:%S")
  >&2 echo -e "${timestamp} [${level}] [$SCRIPT_NAME] ${message}"
}

function log_info {
  local -r message="$1"
  log "INFO" "$message"
}

function log_warn {
  local -r message="$1"
  log "WARN" "$message"
}

function log_error {
  local -r message="$1"
  log "ERROR" "$message"
}

# A retry function that attempts to run a command a number of times and returns the output
function retry {
  local -r cmd="$1"
  local -r description="$2"

  for i in $(seq 1 5); do
    log_info "$description"

    # The boolean operations with the exit status are there to temporarily circumvent the "set -e" at the
    # beginning of this script which exits the script immediatelly for error status while not losing the exit status code
    output=$(eval "$cmd") && exit_status=0 || exit_status=$?
    log_info "$output"
    if [[ $exit_status -eq 0 ]]; then
      echo "$output"
      return
    fi
    log_warn "$description failed. Will sleep for 10 seconds and try again."
    sleep 10
  done;

  log_error "$description failed after 5 attempts."
  exit $exit_status
}

function install_dependencies {
  log_info "Installing dependencies"

  sudo apt-get update -y
  sudo DEBIAN_FRONTEND=noninteractive apt-get upgrade -y

  retry \
    "sudo DEBIAN_FRONTEND=noninteractive apt-get --allow-unauthenticated install -y chrony curl ec2-instance-connect fail2ban python3-pip ufw" \
    "Installing dependencies"
}

function fetch_cloudwatch_pkg {
  local -r version="$1"
  local download_url="$2"

  if [[ -z "$download_url" && -n "$version" ]]; then
    download_url="https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/amd64/${version}/amazon-cloudwatch-agent.deb"
  fi

  retry \
    "curl -o '$DOWNLOAD_CLOUDWATCH_PACKAGE_PATH' '$download_url' --location --silent --fail --show-error" \
    "Downloading CloudWatch agent to $DOWNLOAD_CLOUDWATCH_PACKAGE_PATH"
}

function install_cloudwatch_agent {
  log_info "Installing CloudWatch agent"

  sudo dpkg -i -E "$DOWNLOAD_CLOUDWATCH_PACKAGE_PATH"

  sudo mkdir -p "$CLOUDWATCH_CONFIGURATION_PATH"
  sudo mv "/tmp/cloudwatch-config.json" "${CLOUDWATCH_CONFIGURATION_PATH}/${CLOUDWATCH_CONFIG_FILE}"
}

function configure_ufw {
  log_info "Configuring UFW"

  sudo ufw default deny incoming
  sudo ufw default allow outgoing
  sudo ufw allow ssh
  sudo ufw --force enable
}

function configure_time {
  log_info "Configuring Chrony"

  # Set chrony to use Amazon Time Sync Service
  sudo sed -i '1s/^/server 169.254.169.123 prefer iburst minpoll 4 maxpoll 4\n/' "/etc/chrony/chrony.conf"
  sudo systemctl restart chrony
}

function configure_system_use_notification {
  log_info "Configuring system use notification"

  sudo bash -c 'echo "************************************************************************" > /etc/issue.net'
  sudo bash -c 'echo "* By your use of these resources, you agree to abide by Proper Use of  *" >> /etc/issue.net'
  sudo bash -c 'echo "* Information Resources, Information Technology, and Networks at the   *" >> /etc/issue.net'
  sudo bash -c 'echo "* University of Michigan (SPG 601.07), in addition to all relevant     *" >> /etc/issue.net'
  sudo bash -c 'echo "* state and federal laws.                                              *" >> /etc/issue.net'
  sudo bash -c 'echo "* https://spg.umich.edu/policy/601.07                                  *" >> /etc/issue.net'
  sudo bash -c 'echo "************************************************************************" >> /etc/issue.net'

  sudo sed -i "s=#Banner none=Banner /etc/issue.net=g" "/etc/ssh/sshd_config"
}

function install_ec2_instance_connect_cli {
  pip3 install ec2instanceconnectcli
}

function install {
  local version="latest"
  local download_url=""

  log_info "Waiting for system to initialize"
  sleep 30

  log_info "Starting setup"

  install_dependencies
  configure_time
  fetch_cloudwatch_pkg "$version" "$download_url"
  install_cloudwatch_agent
  configure_ufw
  install_ec2_instance_connect_cli
  configure_system_use_notification
}

install "$@"
